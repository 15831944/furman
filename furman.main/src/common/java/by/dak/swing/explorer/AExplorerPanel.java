/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExplorerPanel.java
 *
 * Created on 26.11.2009, 23:33:33
 */

package by.dak.swing.explorer;

import by.dak.cutting.swing.DPanel;
import by.dak.cutting.swing.store.helpers.AEntityNEDActions;
import by.dak.swing.ActionsPanel;
import by.dak.swing.infonode.RootWindowProperty;
import by.dak.swing.table.*;
import by.dak.swing.tree.ATreeNode;
import by.dak.swing.tree.ATreePanel;
import by.dak.utils.StateUtils;
import net.infonode.docking.RootWindow;
import net.infonode.docking.SplitWindow;
import net.infonode.docking.View;
import net.infonode.docking.util.DockingUtil;
import net.infonode.docking.util.ViewMap;
import net.infonode.util.Direction;

import javax.swing.*;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

/**
 * @author admin
 */
public abstract class AExplorerPanel extends DPanel
{
    private static final int ROW_HEIGHT = 24;
    private PropertyChangeListener updateGuiListener;

    private PopupMenuHelper pmhTree;
    private JPanel backPanel;
    private JLabel labelEmpty;

    private JPanel panelDetails;
    private ATreePanel treePanel;
    private ActionsPanel actionsPanel = new ActionsPanel();

    private TreePath currentTreePath;


    private ListUpdater listUpdater;
    private by.dak.swing.table.ListNaviTable listNaviTable = new by.dak.swing.table.ListNaviTable();

    private RootWindow rootWindow;


    /**
     * Creates new form ExplorerPanel
     */
    public AExplorerPanel()
    {
        initComponents();
        initEnvironment();
    }

    protected List<View> createViews()
    {
        List<View> views = new ArrayList<View>();
        views.add(createTreePanelView());
        views.add(createEditorPanelView());

        return views;
    }

    private View createTreePanelView()
    {
        View treePanelView = new View(getResourceMap().getString("treePanel.title"),
                getResourceMap().getIcon("treePanel.icon"), treePanel);
        treePanelView.getWindowProperties().setCloseEnabled(false);
        treePanelView.getWindowProperties().setDockEnabled(true);
        treePanelView.getWindowProperties().setUndockEnabled(false);
        treePanelView.getWindowProperties().setDragEnabled(true);
        treePanelView.getWindowProperties().setMinimizeEnabled(true);
        return treePanelView;
    }

    private View createEditorPanelView()
    {
        View view = new View(getResourceMap().getString("editorPanel.title"),
                getResourceMap().getIcon("editorPanel.icon"), backPanel);
        view.getWindowProperties().setCloseEnabled(false);
        view.getWindowProperties().setDockEnabled(false);
        view.getWindowProperties().setUndockEnabled(false);
        view.getWindowProperties().setDragEnabled(true);
        view.getWindowProperties().setMinimizeEnabled(false);
        return view;
    }

    protected RootWindow initRootWindow()
    {
        List<View> views = createViews();
        ViewMap viewMap = new ViewMap(views.toArray(new View[views.size()]));
        rootWindow = DockingUtil.createRootWindow(viewMap, true);
        rootWindow.setName(this.getClass().getSimpleName());
        rootWindow.setWindow(new SplitWindow(true, 0.1f, viewMap.getView(0), viewMap.getView(1)));
        rootWindow.getWindowBar(Direction.LEFT).setEnabled(true);

        return rootWindow;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    protected void initComponents()
    {
        backPanel = new JPanel();
        labelEmpty = new JLabel();
        panelDetails = new JPanel();

        treePanel = new ATreePanel();
        treePanel.setName("treePanel"); // NOI18N

        backPanel.setName("backPanel"); // NOI18N
        backPanel.setLayout(new BorderLayout());

        labelEmpty.setHorizontalAlignment(SwingConstants.CENTER);
        labelEmpty.setText("Нет данных");
        labelEmpty.setEnabled(false);
        labelEmpty.setName("labelEmpty"); // NOI18N
        backPanel.add(labelEmpty, BorderLayout.CENTER);

        panelDetails.setName("panelDetails"); // NOI18N
        panelDetails.setLayout(new BorderLayout());

        getActionsPanel().setName("actionsPanel"); // NOI18N
        panelDetails.add(getActionsPanel(), BorderLayout.CENTER);

        backPanel.add(panelDetails, BorderLayout.CENTER);

        rootWindow = initRootWindow();

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(rootWindow, GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(rootWindow, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
        );
        listNaviTable.setName("listNaviTable"); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    public ActionsPanel getActionsPanel()
    {
        return actionsPanel;
    }

    public ATreePanel getTreePanel()
    {
        return treePanel;
    }

    protected void initEnvironment()
    {
        pmhTree = new PopupMenuHelper(getTreePanel().getTree());
        setShowData(false);
        getTreePanel().getTree().setRowHeight(ROW_HEIGHT);
        getTreePanel().getTree().addTreeSelectionListener(new TreeSelectionListener()
        {
            @Override
            public void valueChanged(final TreeSelectionEvent e)
            {
                if (currentTreePath == null || currentTreePath.equals(e.getOldLeadSelectionPath()))
                {
                    if (validateCurrentContent())
                    {
                        saveSessionState();
                        save();
                        setShowData(false);
                        getActionsPanel().setVisible(false);

                        currentTreePath = e.getNewLeadSelectionPath();
                        if (currentTreePath != null)
                        {
                            initTreePopupMenu();
                            treeSelectedChanged(currentTreePath);
                            loadSessionState();
                        }
                    }
                    else
                    {
                        Runnable runnable = new Runnable()
                        {
                            @Override
                            public void run()
                            {
                                getTreePanel().getTree().getSelectionModel().setSelectionPath(e.getOldLeadSelectionPath());
                            }
                        };
                        SwingUtilities.invokeLater(runnable);
                    }
                }
            }
        });

        setUpdateGuiListener(new PropertyChangeListener()
        {
            @Override
            public void propertyChange(PropertyChangeEvent evt)
            {
                Object o = getTreePanel().getTree().getSelectionPath().getLastPathComponent();
//                if (o instanceof LazyMutableTreeNode)
//                {
//                    ((LazyMutableTreeNode) o).clear();
//                    ((DefaultTreeModel) getTreePanel().getTree().getModel()).nodeStructureChanged(((LazyMutableTreeNode) o));
//                }

                if (o instanceof ListUpdaterProvider)
                {
                    getListNaviTable().reload();
                }
            }
        });

        addHierarchyListener(new HierarchyListener()
        {
            @Override
            public void hierarchyChanged(HierarchyEvent e)
            {
                if ((e.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) > 1 && isShowing())
                {
                    RootWindowProperty.restore(rootWindow);
                }
            }
        });

    }

    private void initTreePopupMenu()
    {
        Object o = currentTreePath.getLastPathComponent();
        if (o instanceof ATreeNode)
        {
            ((ATreeNode) o).setTree(this.getTreePanel().getTree());
            getTreePopupMenuHelper().setActionMap(((ATreeNode) o).getActionMap());
        }
        getTreePopupMenuHelper().setActions(o instanceof ATreeNode ? ((ATreeNode) o).getActions() : null);
        getTreePopupMenuHelper().init();
    }

    protected abstract void save();

    protected abstract boolean validateCurrentContent();

    //метод меняет панель

    protected void setShowData(boolean show)
    {
        JComponent remove = show ? labelEmpty : panelDetails;
        JComponent add = show ? panelDetails : labelEmpty;
        backPanel.remove(remove);
        backPanel.add(add, BorderLayout.CENTER);
        getActionsPanel().setContentComponent(null);

        add.revalidate();
        add.invalidate();
        add.validate();
        backPanel.repaint();
    }


    protected PropertyChangeListener getUpdateGuiListener()
    {
        return updateGuiListener;
    }

    protected void setUpdateGuiListener(PropertyChangeListener updateGuiListener)
    {
        this.updateGuiListener = updateGuiListener;
    }

    public PopupMenuHelper getTreePopupMenuHelper()
    {
        return pmhTree;
    }

    public JPanel getPanelDetails()
    {
        return panelDetails;
    }


    protected void applyListUpdater(ListUpdater listUpdater)
    {
        getListNaviTable().setListUpdater(listUpdater);
        getListNaviTable().init();

        setShowData(true);
        NewEditDeleteActions newEditDeleteActions = listUpdater.getNewEditDeleteActions();
        if (newEditDeleteActions != null)
        {
            newEditDeleteActions.removePropertyChangeListener(AEntityNEDActions.PROPERTY_updateGui, getUpdateGuiListener());
            newEditDeleteActions.addPropertyChangeListener(AEntityNEDActions.PROPERTY_updateGui, getUpdateGuiListener());
        }
        getActionsPanel().setVisible(true);
        getActionsPanel().setContentComponent(getListNaviTable());
        if (listUpdater.getNewEditDeleteActions() != null)
        {
            getActionsPanel().setSourceActionMap(listUpdater.getNewEditDeleteActions().getActionMap());
            getActionsPanel().setActions(listUpdater.getNewEditDeleteActions().getActionNames());
            listUpdater.getNewEditDeleteActions().setRelatedComponent(getListNaviTable());
        }
        else
        {
            getActionsPanel().setActions(null);
        }
        getActionsPanel().init();
        if (listUpdater != null && listUpdater.getTotalProperties() != null)
        {
            TotalPanel totalPanel = getTotalPanel();
            getActionsPanel().add(totalPanel, BorderLayout.NORTH);
        }
    }

    public ListNaviTable getListNaviTable()
    {
        return listNaviTable;
    }


    protected void saveSessionState()
    {
        if (listUpdater != null)
        {
            StateUtils.saveSessionState(getListNaviTable().getTable(), String.valueOf(listUpdater.getName()));
        }
    }

    protected void loadSessionState()
    {
        if (listUpdater != null)
        {
            StateUtils.loadSessionState(getListNaviTable().getTable(), String.valueOf(listUpdater.getName()));
        }
    }

    protected void treeSelectedChanged(TreePath treePath)
    {
        Object o = treePath.getLastPathComponent();
        if (o instanceof ListUpdaterProvider)
        {
            listUpdater = ((ListUpdaterProvider) o).getListUpdater();
            applyListUpdater(listUpdater);
        }
    }

    private TotalPanel getTotalPanel()
    {
        TotalPanel totalPanel = new TotalPanel();
        totalPanel.setListUpdater(listUpdater);
        totalPanel.init();
        return totalPanel;
    }


}
