/*
 * GuillotineTest2.java
 *
 * Created on 2. kvï¿½ten 2007, 11:35
 */

package by.dak.cutting.cut.test;

import by.dak.cutting.cut.base.Element;
import by.dak.cutting.cut.graphics.Draw;
import by.dak.cutting.cut.guillotine.GuillotineTreeCutter;
import by.dak.cutting.cut.guillotine.Segment;

import java.awt.*;

/**
 * @author Peca
 */
public class GuillotineTest2 extends javax.swing.JFrame
{

    Segment segment;
    GuillotineTreeCutter cutter;

    /**
     * Creates new form GuillotineTest2
     */
    public GuillotineTest2()
    {
        segment = new Segment(1000, 200);
        segment.setFixedLength(true);
        segment.setFixedWidth(true);
        cutter = new GuillotineTreeCutter();

        // Segment seg = new Segment(60, 150);
        //segment.by.dak.cutting.cut(seg);

        /* seg.by.dak.cutting.cut(new Segment(50, 20));
      seg.by.dak.cutting.cut(new Segment(80, 50));

      seg = new Segment(60, 20);
      segment.by.dak.cutting.cut(seg);
      seg.by.dak.cutting.cut(new Segment(70, 140));*/

        initComponents();
    }


    private void drawSegment(int x, int y, Segment segment, Graphics g)
    {

        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(1));

        int s = 4 - segment.getLevel();
        s = 0;
        int w, h, w2, h2;
        Color c;
        if ((segment.getLevel() % 2) == 0)
        {
            w = segment.getLength();
            //w2 = segment.length;
            h = segment.getWidth();
            //h2 = segment.width;
        }
        else
        {
            w = segment.getWidth();
            // w2 = segment.width;
            h = segment.getLength();
            //h2 = segment.length;
        }
        if (segment.getLevel() == 0) c = Color.lightGray;
        else c = Draw.getColor(segment.getLevel());

        g.setColor(c);
        g.fillRect(x, y, w + s, h + s);
        g.setColor(Color.BLACK);
        g.drawRect(x, y, w + s, h + s);
        //g2.setStroke(new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, new float[] {10, 5}, 0.0f));
        //if(segment.getLevel()== 4)g2.drawRect(x, y, w2+s, h2+s);


        int y2 = y;
        int x2 = x;
        for (Segment seg : segment.getItems())
        {
            drawSegment(x2, y2, seg, g);
            if ((segment.getLevel() % 2) == 0) x2 += seg.getWidth();
            else y2 += seg.getWidth();
        }

    }

    public void paint(Graphics g)
    {
        super.paint(g);
        // g = jPanel1.getGraphics();
        //g.setColor(Color.RED);
        //g.fillRect(5, 5, segment.getWidth(), segment.getHeight());

        drawSegment(5, 5, segment, g);

        //g.drawRect(0, 0, 100, 50);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 598, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 497, Short.MAX_VALUE)
        );

        pack();
    }// </draw-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt)
    {//GEN-FIRST:event_jButton2MouseClicked
        // segment.sort();
        this.repaint();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt)
    {//GEN-FIRST:event_jButton1MouseClicked
        Integer[] sizes = {130, 200, 100};
        Element[] els = new Element[2];
        //this.setAlwaysOnTop(true);
        els[0] = new Element(120, 60, 1);
        els[1] = new Element(120, 50, 2);
        for (int i = 0; i < els.length; i++)
        {
            //els[i] = new Element(rnd.nextInt(40)+10, rnd.nextInt(40)+10, 0, i);
            if (!cutter.cut(segment, els[i], 4, Integer.MAX_VALUE, false)) System.out.println(false);
            /*this.paint(this.getGraphics());
           try{
               System.in.read();
           }catch(Exception ex){}*/
        }

        /*
        int[] order = new int[els.length];
        segment.sort();
        segment.getElementsOrder(order, 0);
        segment.clear();
        for(int i=0; i<els.length; i++){
            System.out.print(order[i]+",");
            if(!cutter.by.dak.cutting.cut(segment, els[order[i]], sizes))System.out.println(false);
            this.paint(this.getGraphics());
            try{
                System.in.read();
            }catch(Exception ex){}
        }*/


        this.repaint();
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GuillotineTest2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
