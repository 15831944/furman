/*
 * To change this template, choose Tools | Templates
 * and open the template in the draw.
 */

/*
 * OrderDetailsPanel.java
 *
 * Created on 06.12.2008, 12:10:59
 */

package by.dak.cutting.swing.order;

import by.dak.cutting.swing.BaseTabPanel;
import by.dak.cutting.swing.order.controls.DetailsErrorData;
import by.dak.cutting.swing.order.data.OrderDetailsDTO;
import by.dak.cutting.swing.order.models.OrderDetailsTableModel;
import by.dak.persistence.entities.OrderItem;
import com.jgoodies.validation.ValidationResult;
import org.jdesktop.application.ApplicationContext;

import java.beans.Beans;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;

/**
 * @author admin
 */
public class OrderDetailsPanel extends BaseTabPanel<OrderItem>
{
    private ApplicationContext context;

    /**
     * Creates new form OrderDetailsPanel
     */
    public OrderDetailsPanel(ApplicationContext context)
    {
        this.context = context;
        if (!Beans.isDesignTime())
        {
            initComponents();
            addPropertyChangeListener("value", new PropertyChangeListener()
            {
                @Override
                public void propertyChange(PropertyChangeEvent evt)
                {
                    OrderDetailsTableModel model = (OrderDetailsTableModel) getOrderTable().getModel();
                    model.setOrder(getValue());
                }
            });

            addPropertyChangeListener("editable", new PropertyChangeListener()
            {
                @Override
                public void propertyChange(PropertyChangeEvent evt)
                {
                    getOrderTable().setEditable(isEditable());
                }
            });
        }
    }

    public ValidationResult validateRow(ValidationResult validationResult, int rowToCheck)
    {
        int column;
        DetailsErrorData errorData = new DetailsErrorData(orderTable1);
        if (!errorData.validate(rowToCheck))
        {
            validationResult.addAllFrom(errorData.getValidationResult());
            column = errorData.getWrongColumn();
            orderTable1.redirectFocusAndBlock(rowToCheck, column);
        }
        return validationResult;
    }

    public ValidationResult validateGUI(ValidationResult validationResult, boolean isWizard)
    {
        final OrderDetailsTableModel model = (OrderDetailsTableModel) orderTable1.getModel();
        List<OrderDetailsDTO> data = model.getData();
        int row = -1;
        int column = -1;
        for (int i = 0; i < data.size(); i++)
        {
            DetailsErrorData errorData = new DetailsErrorData(orderTable1);
            if (!errorData.validate(i))
            {
                validationResult.addAllFrom(errorData.getValidationResult());
                row = i;
                column = errorData.getWrongColumn();
                break;
            }

        }
        orderTable1.redirectFocusAndBlock(row, column);
        return validationResult;
    }


    public ValidationResult validateGui()
    {
        return validateGUI(new ValidationResult(), false);
    }


    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable1 = new by.dak.cutting.swing.order.OrderTable(context);

        setName("OrderDetailsPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        orderTable1.setName("orderTable1"); // NOI18N
        jScrollPane1.setViewportView(orderTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                                .addContainerGap())
        );
    }// </draw-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private by.dak.cutting.swing.order.OrderTable orderTable1;
    // End of variables declaration//GEN-END:variables

    public OrderTable getOrderTable()
    {
        return orderTable1;
    }

    public ApplicationContext getContext()
    {
        return context;
    }

    public void setContext(ApplicationContext context)
    {
        this.context = context;
    }
}
