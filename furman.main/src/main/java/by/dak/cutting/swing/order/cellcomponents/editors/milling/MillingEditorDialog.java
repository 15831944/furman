/*
 * To change this template, choose Tools | Templates
 * and open the template in the draw.
 */

/*
 * MillingEditorDialog.java
 *
 * Created on 15.07.2009, 22:30:56
 */

package by.dak.cutting.swing.order.cellcomponents.editors.milling;

import by.dak.cutting.DialogShowers;
import by.dak.cutting.swing.order.data.OrderDetailsDTO;
import by.dak.cutting.swing.order.models.OrderDetailsTableModel;
import by.dak.cutting.swing.table.CellContext;
import by.dak.swing.ButtonEditor;
import nl.jj.swingx.gui.modal.JModalFrame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Dimension2D;

/**
 * @author admin
 */
public class MillingEditorDialog extends JModalFrame
{

    /**
     * Creates new form MillingEditorDialog
     */
    public MillingEditorDialog(Window window, boolean modal)
    {
        super(window, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        millingDrawingPanel = new by.dak.cutting.swing.order.cellcomponents.editors.milling.MillingDrawingPanel();
        buttonOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        millingDrawingPanel.setName("millingDrawingPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(MillingEditorDialog.class);
        buttonOk.setText(resourceMap.getString("buttonOk.text")); // NOI18N
        buttonOk.setName("buttonOk"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(millingDrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(624, Short.MAX_VALUE)
                                .addComponent(buttonOk)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(millingDrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonOk)
                                .addContainerGap())
        );

        pack();
    }// </draw-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                MillingEditorDialog dialog = new MillingEditorDialog(null, false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonOk;
    private OrderDetailsDTO detailsDTO;
    private by.dak.cutting.swing.order.cellcomponents.editors.milling.MillingDrawingPanel millingDrawingPanel;
    // End of variables declaration//GEN-END:variables

    private MillingConverter converter = new MillingConverter();

    //todo должно быть переделано
    private ActionListener listener = new ActionListener()
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            DialogShowers.getMillingEditorDialogShower(MillingEditorDialog.this).show();
        }
    };

    //todo должно быть переделано
    private ButtonEditor.ReturnValue returnValue = new ButtonEditor.ReturnValue()
    {
        @Override
        public Object getValue()
        {
            return MillingEditorDialog.this.getMilling();
        }

        @Override
        public void setCommitAction(Action action)
        {
            MillingEditorDialog.this.getButtonOk().setAction(action);
        }

        @Override
        public void setCellContext(CellContext cellContext)
        {
            long l = ((OrderDetailsTableModel) cellContext.getTable().getModel()).getRowBy(cellContext.getRow()).getLength();
            long w = ((OrderDetailsTableModel) cellContext.getTable().getModel()).getRowBy(cellContext.getRow()).getWidth();

            OrderDetailsDTO dto = ((OrderDetailsTableModel) cellContext.getTable().getModel()).getRowBy(cellContext.getRow());

            MillingEditorDialog.this.setDetailsDTO(dto);
            MillingEditorDialog.this.setElement(new Dimension((int) l, (int) w));
            MillingEditorDialog.this.setMilling((String) cellContext.getValue());
        }

        @Override
        public void hidePopup()
        {
            MillingEditorDialog.this.dispose();
        }

        @Override
        public void setCancelAction(final Action action)
        {
            MillingEditorDialog.this.addWindowListener(new WindowAdapter()
            {
                @Override
                public void windowClosing(WindowEvent e)
                {
                    action.actionPerformed(null);
                }
            });
        }
    };


    public void setElement(Dimension2D element)
    {
        millingDrawingPanel.setElement(element);
    }


    public Dimension2D getElement()
    {
        return millingDrawingPanel.getElement();
    }


    public ElementDrawing getElementDrawing()
    {
        return (ElementDrawing) millingDrawingPanel.getDrawing();
    }


    public String getMilling()
    {
        return converter.save(getElementDrawing());
    }

    public void setMilling(String milling)
    {
        millingDrawingPanel.getView().clearSelection();
        if (milling != null)
        {
            converter.restore(milling, getElementDrawing());
        }
        else
        {
            millingDrawingPanel.getDrawing().removeAllChildren();
        }
    }

    public JButton getButtonOk()
    {
        return buttonOk;
    }

    public ButtonEditor.ReturnValue getReturnValue()
    {
        return returnValue;
    }

    public ActionListener getListener()
    {
        return listener;
    }

    public OrderDetailsDTO getDetailsDTO()
    {
        return detailsDTO;
    }

    public void setDetailsDTO(OrderDetailsDTO detailsDTO)
    {
        this.detailsDTO = detailsDTO;
        millingDrawingPanel.setDetailsDTO(getDetailsDTO());
    }
}
