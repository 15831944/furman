/*
 * To change this template, choose Tools | Templates
 * and open the template in the draw.
 */

/*
 * SourceMaterialPanel.java
 *
 * Created on 03.06.2009, 20:48:13
 */

package by.dak.cutting.swing.dictionaries;

import by.dak.cutting.swing.dictionaries.multiselect.FurnitureCodeComparator;
import by.dak.cutting.swing.dictionaries.multiselect.TextureComparator;
import by.dak.cutting.swing.renderer.EntityListRenderer;
import by.dak.persistence.FacadeContext;
import by.dak.persistence.entities.BoardDef;
import by.dak.persistence.entities.PriceAware;
import by.dak.persistence.entities.Priced;
import by.dak.persistence.entities.predefined.MaterialType;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.beansbinding.*;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingbinding.SwingBindings;

import java.beans.Beans;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * @author admin
 */
public class SourceMaterialPanel extends javax.swing.JPanel
{

    private MaterialType materialType;
    private static final BoardDef ALL_DUMMY = new BoardDef();

    static
    {
        //todo В бандлы
        ALL_DUMMY.setName("Все");
    }

    /**
     * Creates new form SourceMaterialPanel
     */
    public SourceMaterialPanel()
    {
        initComponents();
        if (!Beans.isDesignTime())
        {
            initEnvironment();
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        labelMaterial = new javax.swing.JLabel();
        comboBoxMaterial = new by.dak.cutting.swing.DComboBox();
        mscTextures = new by.dak.swing.MultiSelectComponent();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(SourceMaterialPanel.class);
        labelMaterial.setText(resourceMap.getString("labelMaterial.text")); // NOI18N
        labelMaterial.setName("labelMaterial"); // NOI18N

        comboBoxMaterial.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        comboBoxMaterial.setName("comboBoxMaterial"); // NOI18N

        mscTextures.setName("mscTextures"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(mscTextures, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(labelMaterial)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboBoxMaterial, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelMaterial)
                                        .addComponent(comboBoxMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mscTextures, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                .addContainerGap())
        );
    }// </draw-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private by.dak.cutting.swing.DComboBox comboBoxMaterial;
    private javax.swing.JLabel labelMaterial;
    private by.dak.swing.MultiSelectComponent mscTextures;
    // End of variables declaration//GEN-END:variables
    private List materials = ObservableCollections.observableList(new ArrayList());

    private void initEnvironment()
    {

        ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap(SourceMaterialPanel.class);
        mscTextures.setResourceMap(resourceMap);
        mscTextures.setSourceRenderer(new EntityListRenderer());
        comboBoxMaterial.setRenderer(new EntityListRenderer());
        mscTextures.setComparator(new Comparator()
        {
            @Override
            public int compare(Object o1, Object o2)
            {
                return 0;
            }
        });
        mscTextures.setElements(Collections.emptyList());


        initBinding();
    }

    private void initBinding()
    {
        BindingGroup bindingGroup = new BindingGroup();
        Binding binding = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ_WRITE,
                materials, comboBoxMaterial);
        bindingGroup.addBinding(binding);

        binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, comboBoxMaterial,
                BeanProperty.create("selectedItem"),
                this, BeanProperty.create("sourceMaterial"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);

        bindingGroup.bind();
    }

    public void setSourceMaterials(List materials)
    {
        this.materials.clear();
        this.materials.addAll(materials);
        this.materials.add(ALL_DUMMY);
        comboBoxMaterial.setSelectedItem(ALL_DUMMY);
    }

    public List getSourceMaterials()
    {
        return materials;
    }

    public void setSelectedPriceds(List<? extends Priced> priceds)
    {
        mscTextures.setSelectedElements(priceds);
    }

    public List<Priced> getSelectedPriceds()
    {
        return mscTextures.getSelectedElements();
    }

    public void setSourceMaterial(PriceAware material)
    {
        PriceAware old = getSourceMaterial();
        List priceds = null;
        List selectedPriceds = getSelectedPriceds();
        if (material != null)
        {
            //если выбран  ALL_DUMMY добавляем все
            if (material == ALL_DUMMY)
            {
                priceds = FacadeContext.getMaterialTypeHelper().findAllPriceds(getMaterialType());
            }
            else
            {
                priceds = FacadeContext.getMaterialTypeHelper().findPricedsBy(material);
            }
        }
        mscTextures.setElements(priceds != null ? priceds : Collections.EMPTY_LIST);
        mscTextures.setSelectedElements(selectedPriceds);
        firePropertyChange("sourceMaterial", old, material);
    }

    public PriceAware getSourceMaterial()
    {
        return (PriceAware) comboBoxMaterial.getSelectedItem();
    }

    public MaterialType getMaterialType()
    {
        return materialType;
    }

    public void setMaterialType(MaterialType materialType)
    {
        this.materialType = materialType;
        switch (this.materialType)
        {
            case board:
            case border:
                mscTextures.setComparator(new TextureComparator());
                break;
            case furniture:
            case zprofile:
            case agtprofile:
                mscTextures.setComparator(new FurnitureCodeComparator());
                break;
            default:
                throw new IllegalArgumentException();
        }
    }
}
