/*
 * To change this template, choose Tools | Templates
 * and open the template in the draw.
 */

/*
 * CutoffPanel.java
 *
 * Created on 19.04.2009, 12:07:06
 */

package by.dak.cutting.swing.order.cellcomponents.editors.cuttoff;

import by.dak.cutting.swing.order.data.Cutoff;
import by.dak.cutting.swing.renderer.EntityListRenderer;
import by.dak.cutting.swing.text.DoubleDocument;
import org.apache.commons.lang.StringUtils;
import org.jdesktop.beansbinding.*;
import org.jdesktop.swingbinding.SwingBindings;

import javax.swing.text.Document;
import java.beans.PropertyChangeSupport;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.List;

/**
 * @author admin
 */
public class CutoffPanel extends javax.swing.JPanel {
	private PropertyChangeSupport propertySupport = new PropertyChangeSupport(this);
	private BindingListener bindingListener = new BindingListener() {
		@Override
		public void bindingBecameBound(Binding binding) {
		}

		@Override
		public void bindingBecameUnbound(Binding binding) {
		}

		@Override
		public void syncFailed(Binding binding, Binding.SyncFailure failure) {
		}

		@Override
		public void synced(Binding binding) {
			propertySupport.firePropertyChange("cutoff", null, getCutoff());
		}

		@Override
		public void targetChanged(Binding binding, PropertyStateEvent event) {
		}

		@Override
		public void sourceChanged(Binding binding, PropertyStateEvent event) {
		}
	};


	/**
	 * Creates new form CutoffPanel
	 */
	public CutoffPanel() {
		initComponents();
		initEnvironment();
	}

	private void initEnvironment() {
		fieldHOffset.setDocument(new DoubleDocument());
		fieldVOffset.setDocument(new DoubleDocument());

		List<Cutoff.Angle> cutoffs = Arrays.asList(Cutoff.Angle.values());

		Binding binding = SwingBindings.createJComboBoxBinding(AutoBinding.UpdateStrategy.READ_WRITE, cutoffs,
				getComboBoxAngle());
		BindingGroup group = new BindingGroup();
		group.addBinding(binding);
		group.bind();

		getComboBoxAngle().setRenderer(new EntityListRenderer<Cutoff.Angle>());
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		buttonGroup = new javax.swing.ButtonGroup();
		comboBoxAngle = new by.dak.cutting.swing.DComboBox();
		fieldHOffset = new javax.swing.JTextField() {
			@Override
			public void setDocument(Document doc) {
				super.setDocument(doc);
			}
		};
		fieldVOffset = new javax.swing.JTextField();
		labelAngle = new javax.swing.JLabel();
		labelHoriz = new javax.swing.JLabel();
		labelVert = new javax.swing.JLabel();

		getComboBoxAngle().setName("comboBoxAngle"); // NOI18N

		fieldHOffset.setName("fieldHOffset"); // NOI18N

		fieldVOffset.setName("fieldVOffset"); // NOI18N

		labelAngle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(CutoffPanel.class);
		labelAngle.setText(resourceMap.getString("labelAngle.text")); // NOI18N
		labelAngle.setName("labelAngle"); // NOI18N

		labelHoriz.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		labelHoriz.setText(resourceMap.getString("labelHoriz.text")); // NOI18N
		labelHoriz.setName("labelHoriz"); // NOI18N

		labelVert.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		labelVert.setText(resourceMap.getString("labelVert.text")); // NOI18N
		labelVert.setName("labelVert"); // NOI18N

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGap(10, 10, 10)
												.addComponent(labelAngle, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(labelHoriz, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGroup(layout.createSequentialGroup()
												.addContainerGap()
												.addComponent(labelVert, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(getComboBoxAngle(), javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
										.addComponent(fieldVOffset, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
										.addComponent(fieldHOffset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
								.addContainerGap())
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(getComboBoxAngle(), javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(labelAngle))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(labelHoriz)
										.addComponent(fieldHOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(labelVert)
										.addComponent(fieldVOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
	}// </draw-fold>//GEN-END:initComponents


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup buttonGroup;
	private by.dak.cutting.swing.DComboBox comboBoxAngle;
	private javax.swing.JTextField fieldHOffset;
	private javax.swing.JTextField fieldVOffset;
	private javax.swing.JLabel labelAngle;
	private javax.swing.JLabel labelHoriz;
	private javax.swing.JLabel labelVert;
	// End of variables declaration//GEN-END:variables

	private Cutoff cutoff;
	private BindingGroup group = new BindingGroup();


	public Cutoff getCutoff() {
		return cutoff;
	}

	public void setCutoff(Cutoff cutoff) {
		this.cutoff = cutoff;
		initBinding();
	}

	private void initBinding() {

		group.unbind();
		group.removeBindingListener(bindingListener);

		Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, cutoff, BeanProperty
				.create("HOffset"), fieldHOffset, BeanProperty.create("text"));
//        binding.setSourceUnreadableValue(null);
		binding.setConverter(new DoubleConverter());
		group.addBinding(binding);

		binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, cutoff, BeanProperty
				.create("VOffset"), fieldVOffset, BeanProperty.create("text"));
//        binding.setSourceUnreadableValue(null);
		binding.setConverter(new DoubleConverter());
		group.addBinding(binding);


		binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, cutoff,
				BeanProperty.create("angle"), getComboBoxAngle(), BeanProperty.create("selectedItem"));
		group.addBinding(binding);

		group.bind();
		group.addBindingListener(bindingListener);
	}

	public PropertyChangeSupport getPropertySupport() {
		return propertySupport;
	}


	public by.dak.cutting.swing.DComboBox getComboBoxAngle() {
		return comboBoxAngle;
	}

	private static class DoubleConverter extends Converter<java.lang.Double, String> {
		@Override
		public String convertForward(Double value) {
			return value != null ? NumberFormat.getInstance().format(value) : null;
		}

		@Override
		public Double convertReverse(String value) {
			return StringUtils.isBlank(value) ? null : new Double(value);
		}
	}
}
