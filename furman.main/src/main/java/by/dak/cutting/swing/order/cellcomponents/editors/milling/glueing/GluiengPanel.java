/*
 * To change this template, choose Tools | Templates
 * and open the template in the draw.
 */

/*
 * GluiengPanel.java
 *
 * Created on 24.8.2009, 18.43.46
 */
package by.dak.cutting.swing.order.cellcomponents.editors.milling.glueing;

import by.dak.cutting.swing.ItemSelector;
import by.dak.persistence.FacadeContext;
import by.dak.persistence.entities.BorderDefEntity;
import by.dak.persistence.entities.TextureEntity;
import by.dak.utils.BindingAdapter;
import com.jgoodies.validation.ValidationResult;
import org.jdesktop.beansbinding.*;

import javax.swing.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;

/**
 * @author alkoyro
 */
public class GluiengPanel extends javax.swing.JPanel
{

    /**
     * Creates new form GluiengPanel
     */
    public GluiengPanel()
    {
        initComponents();
        updateBorderDefs();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        selectorBorderDef = new by.dak.cutting.swing.ItemSelector();
        selectorTexture = new by.dak.cutting.swing.ItemSelector();
        labelBorderDef = new javax.swing.JLabel();
        labelTuxture = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();

        setName("Form"); // NOI18N

        selectorBorderDef.setName("selectorBorderDef"); // NOI18N

        selectorTexture.setName("selectorTexture"); // NOI18N

        labelBorderDef.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(GluiengPanel.class);
        labelBorderDef.setText(resourceMap.getString("labelBorderDef.text")); // NOI18N
        labelBorderDef.setName("labelBorderDef"); // NOI18N

        labelTuxture.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTuxture.setText(resourceMap.getString("labelTuxture.text")); // NOI18N
        labelTuxture.setName("labelTuxture"); // NOI18N

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(labelTuxture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelBorderDef, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(selectorTexture, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                                .addComponent(selectorBorderDef, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE))))
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(selectorBorderDef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelBorderDef, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(selectorTexture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelTuxture, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton)
                        .addContainerGap())
        );
    }// </draw-fold>//GEN-END:initComponents

    public void setTextures(List<TextureEntity> listTextures)
    {
        selectorTexture.setItems(listTextures);
    }

    public void setBorderDefs(List<BorderDefEntity> listBorderDefs)
    {
        selectorBorderDef.setItems(listBorderDefs);
    }

    public void setOkAction(Action action)
    {
        okButton.setAction(action);
    }

    public JButton getOkButton()
    {
        return okButton;
    }

    public ItemSelector<BorderDefEntity> getSelectorBorderDef()
    {
        return selectorBorderDef;
    }

    public void setSelectorBorderDef(ItemSelector<BorderDefEntity> selectorBorderDef)
    {
        this.selectorBorderDef = selectorBorderDef;
    }

    public ItemSelector<TextureEntity> getSelectorTexture()
    {
        return selectorTexture;
    }

    public void setSelectorTexture(ItemSelector<TextureEntity> selectorTexture)
    {
        this.selectorTexture = selectorTexture;
    }

    private void initBinding()
    {
        BindingGroup bindingGroup = new BindingGroup();
        selectorBorderDef.getComboBoxItem().setSelectedItem(null);
        selectorTexture.getComboBoxItem().setSelectedItem(null);


        selectorBorderDef.getComboBoxItem().addItemListener(
                new ItemListener()
                {
                    @Override
                    public void itemStateChanged(ItemEvent e)
                    {
                        BorderDefEntity borderDef = (BorderDefEntity) selectorBorderDef.getComboBoxItem().getSelectedItem();
                        if (borderDef != null)
                        {
                            updateTextures(borderDef);
                        }
                    }
                });


        Binding bindingBorderDef = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE,
                gluieng, BeanProperty.create("borderDef"),
                selectorBorderDef.getComboBoxItem(),
                BeanProperty.create("selectedItem"));
        bindingBorderDef.setSourceUnreadableValue(null);
        bindingGroup.addBinding(bindingBorderDef);

        Binding bindingTexture = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE,
                gluieng, BeanProperty.create("texture"),
                selectorTexture.getComboBoxItem(),
                BeanProperty.create("selectedItem"));
        bindingTexture.setSourceUnreadableValue(null);
        bindingGroup.addBinding(bindingTexture);

        bindingGroup.bind();

        bindingBorderDef.addBindingListener(new BindingAdapter()
        {
            @Override
            public void synced(Binding binding)
            {
                okButton.setEnabled(getValidationResult().getErrors().size() == 0);
            }

            @Override
            public void syncFailed(Binding binding, Binding.SyncFailure failure)
            {
                okButton.setEnabled(getValidationResult().getErrors().size() == 0);
            }
        });
    }


    private void updateTextures(BorderDefEntity borderDef)
    {
        selectorTexture.setItems(FacadeContext.getTextureFacade().findTexturesBy(borderDef));
    }

    public Gluieng getGluieng()
    {
        return gluieng;
    }

    public void setGluieng(Gluieng gluieng)
    {
        this.gluieng = gluieng;
        initBinding();
    }

    private void updateBorderDefs()
    {
        this.setBorderDefs(FacadeContext.getBorderDefFacade().loadAll());
    }

    public ValidationResult getValidationResult()
    {
        ValidationResult validationResult = new ValidationResult();
        BorderDefEntity boardDef = getGluieng().getBorderDef();
        TextureEntity texture = getGluieng().getTexture();
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(GluiengPanel.class);
        if (boardDef == null)
        {
            validationResult.addError(resourceMap.getString("validator.boardDefError.text"));
        }

        if (texture == null)
        {
            validationResult.addError(resourceMap.getString("validator.textureError.text"));
        }
        return validationResult;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelBorderDef;
    private javax.swing.JLabel labelTuxture;
    private javax.swing.JButton okButton;
    private by.dak.cutting.swing.ItemSelector selectorBorderDef;
    private by.dak.cutting.swing.ItemSelector selectorTexture;
    private Gluieng gluieng;
    // End of variables declaration//GEN-END:variables
}
