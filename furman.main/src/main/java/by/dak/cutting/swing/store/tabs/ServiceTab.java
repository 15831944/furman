/*
 * To change this template, choose Tools | Templates
 * and open the template in the draw.
 */

/*
 * ServiceTab.java
 *
 * Created on Jun 17, 2009, 4:45:28 PM
 */

package by.dak.cutting.swing.store.tabs;

import by.dak.cutting.swing.BaseTabPanel;
import by.dak.persistence.FacadeContext;
import by.dak.persistence.entities.Service;
import by.dak.persistence.entities.predefined.MaterialType;
import by.dak.persistence.entities.predefined.ServiceType;
import by.dak.utils.BindingAdapter;
import by.dak.utils.validator.ValidatorAnnotationProcessor;
import com.jgoodies.validation.ValidationResult;
import org.jdesktop.beansbinding.*;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingbinding.SwingBindings;

import java.beans.Beans;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author akoyro
 */
public class ServiceTab extends BaseTabPanel<Service>
{
    /**
     * Creates new form ServiceTab
     */
    public ServiceTab()
    {
        initComponents();
        if (!Beans.isDesignTime())
        {
            initBinding();
            setEditable(false);
            addPropertyChangeListener("value", new PropertyChangeListener()
            {
                @Override
                public void propertyChange(PropertyChangeEvent evt)
                {
                    setEditable(getValue() != null && !getValue().hasId());
                    bindComboBoxes();
                }
            });
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        labelServiceType = new javax.swing.JLabel();
        labelMaterialType = new javax.swing.JLabel();
        comboBoxMaterialType = new by.dak.cutting.swing.DComboBox();
        comboBoxServiceType = new by.dak.cutting.swing.DComboBox();

        setName("Form"); // NOI18N

        labelServiceType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(by.dak.cutting.CuttingApp.class).getContext().getResourceMap(ServiceTab.class);
        labelServiceType.setText(resourceMap.getString("labelServiceType.text")); // NOI18N
        labelServiceType.setName("labelServiceType"); // NOI18N

        labelMaterialType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelMaterialType.setText(resourceMap.getString("labelMaterialType.text")); // NOI18N
        labelMaterialType.setName("labelMaterialType"); // NOI18N

        comboBoxMaterialType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        comboBoxMaterialType.setName("comboBoxMaterialType"); // NOI18N
        comboBoxMaterialType.setEnabled(false);

        comboBoxServiceType.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        comboBoxServiceType.setName("comboBoxServiceType"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(labelMaterialType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelServiceType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comboBoxServiceType, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                        .addComponent(comboBoxMaterialType, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelServiceType)
                                        .addComponent(comboBoxServiceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelMaterialType)
                                        .addComponent(comboBoxMaterialType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </draw-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private by.dak.cutting.swing.DComboBox comboBoxServiceType;
    private javax.swing.JLabel labelMaterialType;
    private javax.swing.JLabel labelServiceType;
    private by.dak.cutting.swing.DComboBox comboBoxMaterialType;
    // End of variables declaration//GEN-END:variables

    private BindingGroup comboBoxBindingGroup = new BindingGroup();
    private List<ServiceType> serviceTypes = ObservableCollections.observableList(new ArrayList());

    @Override
    public ValidationResult validateGui()
    {
        return ValidatorAnnotationProcessor.getProcessor().validate(getValue());
    }

    private void initBinding()
    {
        comboBoxMaterialType.setSelectedItem(null);
        comboBoxServiceType.setSelectedItem(null);

        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, getValue(), BeanProperty
                .create("serviceType"), comboBoxServiceType, BeanProperty.create("selectedItem"));
        binding.setSourceUnreadableValue(null);
        getBindingGroup().addBinding(binding);
        binding.addBindingListener(new BindingAdapter()
        {
            @Override
            public void synced(Binding binding)
            {
                if (comboBoxServiceType.getSelectedItem() != null && comboBoxServiceType.getSelectedItem() instanceof ServiceType)
                {
                    comboBoxMaterialType.setSelectedItem(((ServiceType) comboBoxServiceType.getSelectedItem()).getMaterialType());
                }
            }
        });

        getBindingGroup().bind();

        List<MaterialType> list = Arrays.asList(MaterialType.values());
        binding = SwingBindings.createJComboBoxBinding(
                AutoBinding.UpdateStrategy.READ_WRITE, list,
                comboBoxMaterialType);
        comboBoxBindingGroup.addBinding(binding);

        binding = SwingBindings.createJComboBoxBinding(
                AutoBinding.UpdateStrategy.READ_WRITE, serviceTypes,
                comboBoxServiceType);
        comboBoxBindingGroup.addBinding(binding);
        comboBoxBindingGroup.bind();

    }


    private void bindComboBoxes()
    {
        getBindingGroup().unbind();
        comboBoxBindingGroup.unbind();
        comboBoxServiceType.setEnabled(isEditable());
        List<ServiceType> types = isEditable() ? FacadeContext.getServiceFacade().getAvailableServiceTypes() : Arrays.asList(ServiceType.values());
        serviceTypes.clear();
        serviceTypes.addAll(types);
        comboBoxBindingGroup.bind();
        comboBoxServiceType.setSelectedItem(getValue() != null ? getValue().getServiceType() : null);
        getBindingGroup().bind();

    }


}
