/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FurnitureLinkPanel.java
 *
 * Created on 11.03.2010, 14:37:12
 */

package by.dak.cutting.swing.order;

import by.dak.cutting.MessageBox;
import by.dak.cutting.swing.BaseTabPanel;
import by.dak.cutting.swing.BaseTable;
import by.dak.cutting.swing.renderer.EntityListRenderer;
import by.dak.persistence.FacadeContext;
import by.dak.persistence.entities.FurnitureLink;
import by.dak.persistence.entities.OrderItem;
import by.dak.persistence.entities.predefined.Unit;
import by.dak.persistence.entities.types.FurnitureCode;
import by.dak.persistence.entities.types.FurnitureType;
import by.dak.utils.convert.StringValueAnnotationProcessor;
import org.apache.commons.lang3.StringUtils;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jdesktop.swingx.JXComboBox;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.autocomplete.ComboBoxCellEditor;
import org.jdesktop.swingx.autocomplete.ObjectToStringConverter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.beans.Beans;
import java.util.Vector;


/**
 * Таб для фурнитуры
 *
 * @author user0
 */
public class FurnitureLinkPanel extends BaseTabPanel<OrderItem>
{
    private ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap(this.getClass());
    private FurnitureLinkSupporter supporter = new FurnitureLinkSupporter(this);


    /**
     * Creates new form FurnitureLinkPanel
     */
    public FurnitureLinkPanel()
    {
        initComponents();
        if (!Beans.isDesignTime())
        {
            initEnvironment();
        }
    }

    private void initEnvironment()
    {
        addActions();
        getTable().setSortable(false);
        initGuiTable();
        initBinding();
    }

    private void addActions()
    {
        ActionMap aMap = Application.getInstance().getContext().getActionMap(FurnitureLinkPanel.class, this);
        getTable().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)
                .put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "onDelete");
        getTable().getActionMap().put("onDelete", aMap.get("onDelete"));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        furnitureOrderScrollPane = new javax.swing.JScrollPane();
        setTable(new BaseTable());

        setName("Form"); // NOI18N

        furnitureOrderScrollPane.setName("furnitureOrderScrollPane"); // NOI18N

        getTable().setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        getTable().setName("table"); // NOI18N
        getTable().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        getTable().getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        getTable().setRowSelectionAllowed(false);
        getTable().setCellSelectionEnabled(true);
        getTable().getTableHeader().setReorderingAllowed(false);
        furnitureOrderScrollPane.setViewportView(getTable());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(furnitureOrderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(furnitureOrderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane furnitureOrderScrollPane;
    private by.dak.cutting.swing.BaseTable table;
    // End of variables declaration//GEN-END:variables

    private void initGuiTable()
    {
        final JXComboBox codeComboBox = new JXComboBox();
        codeComboBox.setRenderer(new EntityListRenderer());
        AutoCompleteDecorator.decorate(codeComboBox, new ObjectToStringConverter()
        {
            @Override
            public String getPreferredStringForItem(Object item)
            {
                if (item == null)
                    return StringUtils.EMPTY;
                return StringValueAnnotationProcessor.getProcessor().getEntityToStringConverter(item.getClass()).convert(item);
            }
        });
        final JXComboBox typeComboBox = new JXComboBox();
        typeComboBox.setRenderer(new EntityListRenderer());
        AutoCompleteDecorator.decorate(typeComboBox, new ObjectToStringConverter()
        {
            @Override
            public String getPreferredStringForItem(Object item)
            {
                if (item == null)
                    return StringUtils.EMPTY;
                return StringValueAnnotationProcessor.getProcessor().getEntityToStringConverter(item.getClass()).convert(item);
            }
        });

        typeComboBox.setModel(new DefaultComboBoxModel(new Vector(FacadeContext.getFurnitureTypeFacade().loadAll())));


        getTable().setDefaultEditor(FurnitureCode.class, new ComboBoxCellEditor(codeComboBox)
        {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)
            {
                FurnitureType type = (FurnitureType) table.getModel().getValueAt(row, 0);
                if (type != null)
                {
                    codeComboBox.setModel(new DefaultComboBoxModel(new Vector(FacadeContext.getFurnitureCodeFacade().findBy(type))));
                }
                return super.getTableCellEditorComponent(table, value, isSelected, row, column);
            }
        });
		ComboBoxCellEditor editor = new ComboBoxCellEditor(typeComboBox);
		getTable().setDefaultEditor(FurnitureType.class, editor);

		supporter.adjustComboBoxEditor(typeComboBox);
		supporter.adjustComboBoxEditor(codeComboBox);
	}

    private void initBinding()
    {
        JTableBinding jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ_WRITE,
                supporter.getLinkList(), getTable());

        JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${furnitureType}"), "furnitureType");
        columnBinding.setColumnName(resourceMap.getString("table.column.furnitureType"));
        columnBinding.setColumnClass(FurnitureType.class);
		columnBinding.addBindingListener(supporter.getClearFurnitureCodeListener());
		columnBinding.setEditable(true);

        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${furnitureCode}"), "furnitureCode");
        columnBinding.setColumnName(resourceMap.getString("table.column.furnitureCode"));
        columnBinding.setColumnClass(FurnitureCode.class);
        columnBinding.setEditable(true);

        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${size}"), "size");
        columnBinding.setColumnName(resourceMap.getString("table.column.size"));
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(true);

        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${furnitureType.unit}"), "unit");
        columnBinding.setColumnName(resourceMap.getString("table.column.unit"));
        columnBinding.setColumnClass(Unit.class);
        columnBinding.setEditable(false);

        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${amount}"), "amount");
        columnBinding.setColumnName(resourceMap.getString("table.column.amount"));
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(true);


        jTableBinding.bind();

        jTableBinding.addBindingListener(supporter.getFurnitureLinkChangedController());
    }

    public BaseTable getTable()
    {
        return table;
    }

    public void setTable(BaseTable table)
    {
        this.table = table;
    }

    @Override
    protected void valueChanged()
    {
        supporter.setLinkList(FacadeContext.getFurnitureLinkFacade().loadAllBy(getValue()));
    }

    @org.jdesktop.application.Action
    public void onDelete()
    {
        int selRow = getTable().getSelectedRow();
        //если выброна не пустая строка
        if (selRow > -1)
        {
            FurnitureLink furnitureLink = supporter.getLinkList().get(selRow);
            if (furnitureLink.hasId())
            {
                if (MessageBox.confirmYesNoDeletion())
                {
                    supporter.getLinkList().remove(furnitureLink);
                    FacadeContext.getFurnitureLinkFacade().delete(furnitureLink);
                }
            }
        }
    }
}
