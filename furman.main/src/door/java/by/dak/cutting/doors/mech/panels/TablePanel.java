/*
 * To change this template, choose Tools | Templates
 * and open the template in the draw.
 */

/*
 * TablePanel.java
 *
 * Created on 21.08.2009, 11:57:12
 */

package by.dak.cutting.doors.mech.panels;


import by.dak.cutting.CuttingApp;
import by.dak.cutting.doors.mech.DoorColor;
import by.dak.cutting.doors.mech.DoorComponent;
import by.dak.cutting.doors.mech.DoorMechType;
import by.dak.cutting.swing.BaseTable;
import com.jgoodies.validation.ValidationResult;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.observablecollections.ObservableList;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;

import javax.swing.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author vishutinov
 */
public class TablePanel<V extends MechName> extends javax.swing.JPanel implements WaringPanel
{
    private ObservableList<V> list;
    private Step step;

    /**
     * Creates new form TablePanel
     */
    public TablePanel(List<V> mech, Step step)
    {
        this.step = step;
        initComponents();
        jLabel1.setText(CuttingApp.getApplication().getContext().getResourceMap(TablePanel.class).getString(step.name()));

        if (mech == null)
        {
            list = ObservableCollections.observableList(new ArrayList<V>());
        }
        else
        {
            list = ObservableCollections.observableList(mech);
        }

        addEmptyRow();

        iniBindingGroupe();
    }

    private void addEmptyRow()
    {
        switch (step)
        {
            case TYPE:
                list.add((V) new DoorMechType());
                break;
            case COLOR:
                list.add((V) new DoorColor());
                break;
            case COMPONENT:
                list.add((V) new DoorComponent());
                break;
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <draw-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new BaseTable();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{

                }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.addContainerListener(new java.awt.event.ContainerAdapter()
        {
            public void componentRemoved(java.awt.event.ContainerEvent evt)
            {
                jTable1ComponentRemoved(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </draw-fold>//GEN-END:initComponents

    private void jTable1ComponentRemoved(java.awt.event.ContainerEvent evt)//GEN-FIRST:event_jTable1ComponentRemoved
    {//GEN-HEADEREND:event_jTable1ComponentRemoved
        if (list.get(list.size() - 1) != null && list.get(list.size() - 1).getName() != null && !list.get(list.size() - 1).getName().equals(""))
        {
            addEmptyRow();
        }
    }//GEN-LAST:event_jTable1ComponentRemoved


    private void iniBindingGroupe()
    {
        JTableBinding tableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ_WRITE, list, jTable1);
        JTableBinding.ColumnBinding name = tableBinding.addColumnBinding(BeanProperty.create("name")).setColumnName(CuttingApp.getApplication().getContext().getResourceMap(TablePanel.class).getString("name"));

        name.setColumnClass(String.class);

        tableBinding.bind();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public ValidationResult validateGUI()
    {
        ValidationResult validationResult = new ValidationResult();
        list.remove(list.size() - 1);
        if (list.isEmpty())
        {
            validationResult.addError(jLabel1.getText() + " " + CuttingApp.getApplication().getContext().getResourceMap(TablePanel.class).getString("errorEmpty"));
        }
        else
        {
            for (V mech : list)
            {
                if (mech.getName() == null || mech.getName().equals(""))
                {
                    validationResult.addError(jLabel1.getText() + " " + CuttingApp.getApplication().getContext().getResourceMap(TablePanel.class).getString("errorEmpty"));
                    break;
                }
            }
        }

        addEmptyRow();
        return validationResult;
    }

    @Override
    public JPanel getPanel()
    {
        return this;
    }

    public static enum Step
    {
        TYPE,
        COLOR,
        COMPONENT
    }

    public List<V> getList()
    {
        if (list.get(list.size() - 1) == null || list.get(list.size() - 1).getName() == null || list.get(list.size() - 1).getName().equals(""))
        {
            list.remove(list.size() - 1);
        }

        if (list.isEmpty())
        {
            return null;
        }
        else
        {
            return list.subList(0, list.size());
        }
    }
}
